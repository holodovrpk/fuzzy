import fuzzywuzzy

from fuzzywuzzy import fuzz
from fuzzywuzzy import process

print('Самое обычное сравнение:')
a = fuzz.ratio('Привет мир', 'Привет мир')
print(a)
#Выводит в консоль: 100

a = fuzz.ratio('Привет мир', 'Привт кир')
print(a)
#Выводит в консоль: 84

print('Частичное сравнение:')
#Данный вид сравнения во всей второй строке ищет совпадение с начальной
a = fuzz.partial_ratio('Привет мир', 'Привет мир!')
print(a)
#Выводит в консоль: 100

a = fuzz.partial_ratio('Привет мир', 'Люблю колбасу, Привет мир')
print(a)
#Выводит в консоль: 100

a = fuzz.partial_ratio('Привет мир', 'Люблю колбасу, привет мир')
print(a)
#Выводит в консоль: 90


print('Сравнение по токену Token Sort Ratio:')
#  Слова сравниваются друг с другом, независимо от регистра или порядка
a = fuzz.token_sort_ratio('Привет наш мир', 'мир наш Привет')
print(a)
#Выводит в консоль: 100

a = fuzz.token_sort_ratio('Привет наш мир', 'мир наш любимый Привет')
print(a)
#Выводит в консоль: 78

a = fuzz.token_sort_ratio('1 2 Привет наш мир', '1 мир наш 2 ПриВЕт')
print(a)
#Выводит в консоль: 100

print('Сравнение по токену Token Set Ratio:')
# Это сравнение, в отличие от прошлого, приравнивает строки, если их отличие заключается в повторении слов.
a = fuzz.token_set_ratio('Привет наш мир', 'мир мир наш наш наш ПриВЕт')
print(a)
#Выводит в консоль: 100

print('Продвинутое обычное сравнение:')
# Во многих случаях более целесообразно использовать именно WRatio, так как оно учитывает регистр букв и знаки препинания (не делящие строку)
a = fuzz.WRatio('Привет наш мир', '!ПриВЕт наш мир!')
print(a)
#Выводит в консоль: 100

a = fuzz.WRatio('Привет наш мир', '!ПриВЕт, наш мир!')
print(a)
#Выводит в консоль: 97


city = ["Москва", "Санкт-Петербург", "Саратов", "Краснодар", "Воронеж", "Омск", "Екатеринбург", "Орск", "Красногорск", "Красноярск", "Самара"]
a = process.extract("сараТов.", city, limit=5)
# Параметр limit по умолчанию имеет значение 5
print(a)
#Выводит в консоль: [('Саратов', 100), ('Самара', 62)]

#  Если необходим только первый в списке, то лучше использовать extractOne
city = ["Москва", "Санкт-Петербург", "Саратов", "Краснодар", "Воронеж", "Омск", "Екатеринбург", "Орск", "Красногорск", "Красноярск", "Самара"]
a = process.extractOne("Краногрск", city)
print(a)
#Выводит в консоль: ('Красногорск', 90)


# В сравнении с fuzzywuzzy есть четыре соотношения.
# base_ratio : Расстояние Левенштейна двух строк.
# partial_ratio : Соотношение наиболее похожих подстрок.
# token_sort_ratio : Мера сходства последовательностей сортировка маркера перед сравнением.
# token_set_ratio : Найдите все буквенно-цифровые маркеры в каждой строке.

# По умолчанию process.extract() использует Partial_ratio для сравнения,
# но вы также можете переопределить его третьим параметром на process.extract()
# scorer=fuzz.token_set_ratio